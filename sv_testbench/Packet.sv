`timescale 1ns/100ps
`ifndef INC_PACKET_SV
`define INC_PACKET_SV

class Packet;
  //packet properties
  rand bit[3:0] sa, da;         // random port selection
  rand logic[7:0] payload[$];	// random payload array
  string   name;		// unique identifier for packets generated by gen()
//contraints
  constraint Limit {
    sa inside {[0:15]};
    da inside {[0:15]};
    payload.size() inside {[2:4]};
  }
//method prototypes
  extern function new(string name = "Packet");
  extern function bit compare(Packet pkt2cmp, ref string message);
  extern function void display(string prefix = "NOTE");
endclass:Packet

    //typedef mailbox #(Packet) pkt_mbox;
    function Packet::new(string name);//packet class new() constructor
  this.name = name;
endfunction:new

    function bit Packet::compare(Packet pkt2cmp, ref string message); //checker //returns single bit and pass by reference string argument
      if (payload.size() != pkt2cmp.payload.size()) begin //comparing packet and payload
    message = "Payload Size Mismatch:\n";
        message = { message, $psprintf("payload.size() = %0d, pkt2cmp.payload.size() = %0d\n", payload.size(), pkt2cmp.payload.size()) }; //concatinating
    return(0);
  end
      if (payload == pkt2cmp.payload)  begin
        message = "Successfully Compared";
        message = { message, $psprintf("Packet Sent:  %p\nPkt Received: %p", payload, pkt2cmp.payload) };
        return(1);
      end
    else begin
      message = "Payload Content Mismatch:\n";
      message = { message, $psprintf("Packet Sent:  %p\nPkt Received: %p", payload, pkt2cmp.payload) };
      return(0);
    end
endfunction:compare

    function void Packet::display(string prefix="NOTE");
  $display("[%s]%t %s sa = %0d, da = %0d", prefix, $realtime, name, sa, da);
  foreach(payload[i])
    $display("[%s]%t %s payload[%0d] = %0d", prefix, $realtime, name, i, payload[i]);
endfunction:display
`endif
